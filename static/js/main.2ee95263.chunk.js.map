{"version":3,"sources":["views/Login.js","views/Secret.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleInputs","e","preventDefault","state","userName","password","setState","success","errors","this","to","className","onSubmit","htmlFor","type","onChange","target","value","Component","Secret","src","alt","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAuDeA,E,kDAnDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,aAAe,SAACC,GACdA,EAAEC,iBAC0B,aAAxB,EAAKC,MAAMC,UAAmD,QAAxB,EAAKD,MAAME,SACnD,EAAKC,SAAS,CAAEC,SAAS,EAAMC,OAAQ,KAErC,EAAKF,SAAS,CAAEE,OAAQ,sBAZ5B,EAAKL,MAAQ,CACXI,SAAS,EACTH,SAAU,WACVC,SAAU,OALK,E,qDAkBT,IAAD,OAEP,OAAII,KAAKN,MAAMI,QACN,kBAAC,IAAD,CAAUG,GAAG,YAGpB,yBAAKC,UAAU,SACb,qCACA,0BAAMC,SAAUH,KAAKT,cACnB,6BACE,2BAAOa,QAAQ,QAAf,YACA,2BACEC,KAAK,OACLC,SAAU,SAACd,GAAD,OAAO,EAAKK,SAAS,CAAEF,SAAUH,EAAEe,OAAOC,YAGxD,6BAEE,2BAAOJ,QAAQ,UAAf,YACA,2BACEC,KAAK,SACLC,SAAU,SAACd,GAAD,OAAO,EAAKK,SAAS,CAAED,SAAUJ,EAAEe,OAAOC,YAIxD,sCACA,yBAAKN,UAAU,UAAUF,KAAKN,MAAMK,c,GA7C1BU,a,OCmBLC,E,kDAnBb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDI,MAAQ,GAFI,E,qDAKjB,OACE,yBAAKQ,UAAU,YACb,yBACES,IAAI,6DACJC,IAAI,UAEN,6BACA,kBAAC,IAAD,CAAMX,GAAG,KAAT,sB,GAbaQ,aCcNI,MAXf,WACE,OACE,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjC,kBAAC,IAAD,CAAO0B,KAAK,UAAUC,UAAWN,OCErBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2ee95263.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      success: false,\n      userName: \"juliapim\",\n      password: 12345,\n    };\n  }\n\n  handleInputs = (e) => {\n    e.preventDefault();\n    if (this.state.userName === 'juliapim' || this.state.password === 12345) {\n      this.setState({ success: true, errors: \"\" });\n    } else{\n        this.setState({ errors: \"please try again\" });\n    }\n    \n  };\n  render() {\n      \n    if (this.state.success) {\n      return <Redirect to=\"/secret\"></Redirect>;\n    }\n    return (\n      <div className=\"login\">\n        <h1>Login</h1>\n        <form onSubmit={this.handleInputs}>\n          <div>\n            <label htmlFor=\"text\">Username</label>\n            <input\n              type=\"text\"\n              onChange={(e) => this.setState({ userName: e.target.value })}\n            />\n          </div>\n          <div>\n           \n            <label htmlFor=\"number\">Password</label>\n            <input\n              type=\"number\"\n              onChange={(e) => this.setState({ password: e.target.value })}\n            />\n          </div>\n\n          <button>GO</button>\n          <div className=\"errors\">{this.state.errors}</div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport {Link} from 'react-router-dom';\nclass Secret extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div className='chandley'>\n        <img\n          src=\"https://media.giphy.com/media/mGK1g88HZRa2FlKGbz/giphy.gif\"\n          alt=\"steve\"\n        ></img>\n        <div>\n        <Link to='/'>Back to home</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Secret;\n","import React from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Login from \"./views/Login\";\nimport Secret from \"./views/Secret\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Route exact path=\"/\" component={Login}></Route>\n        <Route path=\"/secret\" component={Secret}></Route>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}